/********************************************************************************
 * Amazing Maze is an educational game created in Java with the libGDX library. Copyright (C) 2017 Hip Hip Array
 *
 * This file is part of Amazing Maze.
 *
 * Amazing Maze is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Amazing Maze is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Amazing Maze. If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package ca.hiphiparray.amazingmaze;

import java.util.Random;

import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;

/**
 * Class to procedurally generate maps.
 *
 * @author Vincent Macri
 */
public class MapFactory {

	/** The width of the maps generated by this factory. */
	private final int width;
	/** The height of the maps generated by this factory. */
	private final int height;

	/** The random number generator used by this factory. */
	private Random random;

	/** Reference to an {@link Assets} instance to load images from. Should be {@link AmazingMazeGame#assets}. */
	private Assets assets;

	/**
	 * Constructor for creation of a map factory.
	 *
	 * @param game The {@link AmazingMazeGame} instance to get resources from.
	 * @param seed The seed to use for generation by this factory.
	 * @param width The width of the maps (in tiles) generated by this factory.
	 * @param height The height of the maps (in tiles) generated by this factory.
	 * @param tileSize The side length (in pixels) of the tiles.
	 */
	public MapFactory(final AmazingMazeGame game, long seed, int width, int height, int tileSize) {
		this.assets = game.assets;
		this.random = new Random(seed);
		this.width = width;
		this.height = height;
		// TODO: Use final variables.
	}

	/** The possible tyoes of tiles in a maze. */
	private enum TileType {
		/** If this tile is a background tile. */
		NONE,
		/** If this tile is a path tile. */
		PATH,
		/** If this tile is a wire tile. */
		WIRE
	}

	public TiledMap getMap() {
		TiledMap map = new TiledMap();

		TileType[][] path = generatePath();

		TiledMapTileLayer backgroundLayer = new TiledMapTileLayer(this.width, this.height, MazeScreen.TILE_SIZE, MazeScreen.TILE_SIZE);

		for (int c = 0; c < backgroundLayer.getWidth(); c++) {
			for (int r = 0; r < backgroundLayer.getHeight(); r++) {
				Cell ce = new Cell();
				if (path[r][c] == TileType.NONE) {
					ce.setTile(assets.backgroundTile);
				} else {
					ce.setTile(assets.placeHolderTile);
				}
				backgroundLayer.setCell(c, r, ce);
			}
		}
		map.getLayers().add(backgroundLayer);

		TiledMapTileLayer wireLayer = new TiledMapTileLayer(this.width, this.height, MazeScreen.TILE_SIZE, MazeScreen.TILE_SIZE);
		path = generatePath();
		for (int c = 0; c < backgroundLayer.getWidth(); c++) {
			for (int r = 0; r < backgroundLayer.getHeight(); r++) {
				if (path[r][c] == TileType.PATH) {
					Cell ce = new Cell();
					ce.setTile(assets.wireTile);
					wireLayer.setCell(c, r, ce);
				}
			}
		}
		map.getLayers().add(wireLayer);

		return map;
	}

	private TileType[][] generatePath() {
		TileType[][] path = new TileType[height][width];
		for (int r = 0; r < height; r++) {
			for (int c = 0; c < width; c++) {
				path[r][c] = TileType.NONE;
			}
		}

		int curCol = 0;
		int curRow = randomInt(1, height - 1);

		int remainingCols = width - 1;
		// Generate path until we have one that reaches the end of the level.
		while (remainingCols >= 0) {
			remainingCols = width - curCol - 1;

			// First move right.
			int deltaCol = randomInt(4, remainingCols / 8);

			if (deltaCol < 4) {
				deltaCol = 4;
			}
			if (deltaCol > remainingCols) {
				deltaCol = Math.max(1, remainingCols);
			}

			for (int c = curCol; c < curCol + deltaCol; c++) {
				path[curRow][c] = TileType.PATH;
			}
			curCol += deltaCol;

			remainingCols = width - curCol - 1;
			if (remainingCols > 0) { // Generate vertically if we haven't reached the end yet.
				int remainingRowsUp = height - curRow - 2;
				int remainingRowsDown = curRow - 1;

				// TODO: Make values less dramatic.
				int deltaRowUp = remainingRowsUp <= 6 ? remainingRowsUp : randomInt(6, remainingRowsUp);
				int deltaRowDown = remainingRowsDown <= 6 ? remainingRowsDown : randomInt(6, remainingRowsDown);

				if (random.nextBoolean()) {
					for (int r = curRow; r < curRow + deltaRowUp; r++) {
						path[r][curCol] = TileType.PATH;
					}
					curRow += deltaRowUp;
				} else {
					for (int r = curRow; r > curRow - deltaRowDown; r--) {
						path[r][curCol] = TileType.PATH;
					}
					curRow -= deltaRowDown;
				}
			}
		}

		return path;
	}

	/**
	 * Use {@link #random} to generate a random integer in the given range.
	 *
	 * @param low The lowest number that can be generated (inclusive).
	 * @param high The highest number that can be generated (exclusive).
	 * @return A random number in the given range, or {@code high} if {@code high <= low}. If {@code high <= low} then {@code high} is no longer exclusive.
	 */
	private int randomInt(int low, int high) {
		if (high <= low) {
			return high;
		}
		return low + random.nextInt(high - low);
	}
}
